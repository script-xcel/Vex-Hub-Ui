-- Vex Hub UI Library
-- A modern, feature-rich UI library for Roblox

local VexHubUI = {}
VexHubUI.__index = VexHubUI

-- Dependencies
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")

-- Constants
local COLORS = {
    PRIMARY = Color3.fromRGB(45, 45, 45),
    SECONDARY = Color3.fromRGB(35, 35, 35),
    ACCENT = Color3.fromRGB(0, 120, 215),
    TEXT = Color3.fromRGB(255, 255, 255),
    TEXT_SECONDARY = Color3.fromRGB(200, 200, 200),
    SUCCESS = Color3.fromRGB(0, 255, 0),
    WARNING = Color3.fromRGB(255, 165, 0),
    ERROR = Color3.fromRGB(255, 0, 0)
}

local FONTS = {
    PRIMARY = Enum.Font.GothamBold,
    SECONDARY = Enum.Font.Gotham,
    MONOSPACE = Enum.Font.Code
}

-- Utility Functions
local function CreateInstance(className, properties)
    local instance = Instance.new(className)
    for property, value in pairs(properties) do
        instance[property] = value
    end
    return instance
end

local function Tween(instance, properties, duration, style, direction)
    local tweenInfo = TweenInfo.new(duration or 0.3, style or Enum.EasingStyle.Quad, direction or Enum.EasingDirection.Out)
    local tween = TweenService:Create(instance, tweenInfo, properties)
    tween:Play()
    return tween
end

-- Window Class
function VexHubUI.new(title, size)
    local self = setmetatable({}, VexHubUI)
    
    self.title = title or "Vex Hub UI"
    self.size = size or UDim2.new(0.5, 0, 0.5, 0)
    self.position = UDim2.new(0.25, 0, 0.25, 0)
    self.elements = {}
    self.tabs = {}
    self.currentTab = nil
    
    -- Create main window frame
    self.window = CreateInstance("ScreenGui", {
        Name = "VexHubUI",
        ResetOnSpawn = false
    })
    
    self.mainFrame = CreateInstance("Frame", {
        Name = "MainFrame",
        Size = self.size,
        Position = self.position,
        BackgroundColor3 = COLORS.PRIMARY,
        BorderSizePixel = 0,
        Parent = self.window
    })
    
    -- Add window shadow
    self.shadow = CreateInstance("ImageLabel", {
        Name = "Shadow",
        Size = UDim2.new(1, 20, 1, 20),
        Position = UDim2.new(0, -10, 0, -10),
        BackgroundTransparency = 1,
        Image = "rbxassetid://5554236805",
        ImageColor3 = Color3.fromRGB(0, 0, 0),
        ImageTransparency = 0.6,
        Parent = self.mainFrame
    })
    
    -- Add title bar
    self.titleBar = CreateInstance("Frame", {
        Name = "TitleBar",
        Size = UDim2.new(1, 0, 0, 30),
        BackgroundColor3 = COLORS.SECONDARY,
        BorderSizePixel = 0,
        Parent = self.mainFrame
    })
    
    self.titleText = CreateInstance("TextLabel", {
        Name = "TitleText",
        Size = UDim2.new(1, -100, 1, 0),
        Position = UDim2.new(0, 10, 0, 0),
        BackgroundTransparency = 1,
        Text = self.title,
        TextColor3 = COLORS.TEXT,
        TextSize = 14,
        Font = FONTS.PRIMARY,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = self.titleBar
    })
    
    -- Add close button
    self.closeButton = CreateInstance("TextButton", {
        Name = "CloseButton",
        Size = UDim2.new(0, 30, 1, 0),
        Position = UDim2.new(1, -30, 0, 0),
        BackgroundColor3 = COLORS.SECONDARY,
        BorderSizePixel = 0,
        Text = "X",
        TextColor3 = COLORS.TEXT,
        TextSize = 14,
        Font = FONTS.PRIMARY,
        Parent = self.titleBar
    })
    
    -- Add minimize button
    self.minimizeButton = CreateInstance("TextButton", {
        Name = "MinimizeButton",
        Size = UDim2.new(0, 30, 1, 0),
        Position = UDim2.new(1, -60, 0, 0),
        BackgroundColor3 = COLORS.SECONDARY,
        BorderSizePixel = 0,
        Text = "-",
        TextColor3 = COLORS.TEXT,
        TextSize = 14,
        Font = FONTS.PRIMARY,
        Parent = self.titleBar
    })
    
    -- Add content area
    self.contentArea = CreateInstance("Frame", {
        Name = "ContentArea",
        Size = UDim2.new(1, 0, 1, -30),
        Position = UDim2.new(0, 0, 0, 30),
        BackgroundColor3 = COLORS.PRIMARY,
        BorderSizePixel = 0,
        Parent = self.mainFrame
    })
    
    -- Add tab container
    self.tabContainer = CreateInstance("Frame", {
        Name = "TabContainer",
        Size = UDim2.new(1, 0, 0, 30),
        Position = UDim2.new(0, 0, 0, 0),
        BackgroundColor3 = COLORS.SECONDARY,
        BorderSizePixel = 0,
        Parent = self.contentArea
    })
    
    -- Add tab content
    self.tabContent = CreateInstance("Frame", {
        Name = "TabContent",
        Size = UDim2.new(1, 0, 1, -30),
        Position = UDim2.new(0, 0, 0, 30),
        BackgroundColor3 = COLORS.PRIMARY,
        BorderSizePixel = 0,
        Parent = self.contentArea
    })
    
    -- Setup window dragging
    local dragging
    local dragInput
    local dragStart
    local startPos
    
    local function update(input)
        local delta = input.Position - dragStart
        self.mainFrame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end
    
    self.titleBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = self.mainFrame.Position
            
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
            
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragInput:Disconnect()
                end
            end)
            
            dragInput = input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.Change then
                    update(input)
                end
            end)
        end
    end)
    
    -- Setup close button
    self.closeButton.MouseButton1Click:Connect(function()
        self.window:Destroy()
    end)
    
    -- Setup minimize button
    self.minimizeButton.MouseButton1Click:Connect(function()
        self.contentArea.Visible = not self.contentArea.Visible
    end)
    
    return self
end

-- Tab System
function VexHubUI:AddTab(name)
    local tab = {
        name = name,
        elements = {},
        button = nil,
        content = nil
    }
    
    -- Create tab button
    tab.button = CreateInstance("TextButton", {
        Name = name .. "Tab",
        Size = UDim2.new(0, 100, 1, 0),
        Position = UDim2.new(0, #self.tabs * 100, 0, 0),
        BackgroundColor3 = COLORS.SECONDARY,
        BorderSizePixel = 0,
        Text = name,
        TextColor3 = COLORS.TEXT,
        TextSize = 14,
        Font = FONTS.PRIMARY,
        Parent = self.tabContainer
    })
    
    -- Create tab content
    tab.content = CreateInstance("ScrollingFrame", {
        Name = name .. "Content",
        Size = UDim2.new(1, 0, 1, 0),
        Position = UDim2.new(0, 0, 0, 0),
        BackgroundColor3 = COLORS.PRIMARY,
        BorderSizePixel = 0,
        ScrollBarThickness = 4,
        ScrollBarImageColor3 = COLORS.ACCENT,
        ScrollBarImageTransparency = 0.5,
        Parent = self.tabContent
    })
    
    -- Setup tab switching
    tab.button.MouseButton1Click:Connect(function()
        self:SwitchTab(name)
    end)
    
    table.insert(self.tabs, tab)
    
    -- If this is the first tab, make it active
    if #self.tabs == 1 then
        self:SwitchTab(name)
    end
    
    return tab
end

function VexHubUI:SwitchTab(name)
    for _, tab in ipairs(self.tabs) do
        tab.content.Visible = tab.name == name
        tab.button.BackgroundColor3 = tab.name == name and COLORS.ACCENT or COLORS.SECONDARY
    end
    self.currentTab = name
end

-- Button Element
function VexHubUI:AddButton(tab, text, callback)
    local button = CreateInstance("TextButton", {
        Name = "Button",
        Size = UDim2.new(0.9, 0, 0, 30),
        Position = UDim2.new(0.05, 0, 0, #tab.elements * 35 + 10),
        BackgroundColor3 = COLORS.SECONDARY,
        BorderSizePixel = 0,
        Text = text,
        TextColor3 = COLORS.TEXT,
        TextSize = 14,
        Font = FONTS.PRIMARY,
        Parent = tab.content
    })
    
    -- Add hover effect
    button.MouseEnter:Connect(function()
        Tween(button, {BackgroundColor3 = COLORS.ACCENT}, 0.2)
    end)
    
    button.MouseLeave:Connect(function()
        Tween(button, {BackgroundColor3 = COLORS.SECONDARY}, 0.2)
    end)
    
    -- Add click effect
    button.MouseButton1Click:Connect(function()
        Tween(button, {Size = UDim2.new(0.9, 0, 0, 28)}, 0.1)
        task.wait(0.1)
        Tween(button, {Size = UDim2.new(0.9, 0, 0, 30)}, 0.1)
        if callback then
            callback()
        end
    end)
    
    table.insert(tab.elements, button)
    return button
end

-- Toggle Element
function VexHubUI:AddToggle(tab, text, default, callback)
    local toggle = {
        value = default or false,
        frame = nil,
        button = nil,
        label = nil
    }
    
    toggle.frame = CreateInstance("Frame", {
        Name = "Toggle",
        Size = UDim2.new(0.9, 0, 0, 30),
        Position = UDim2.new(0.05, 0, 0, #tab.elements * 35 + 10),
        BackgroundColor3 = COLORS.SECONDARY,
        BorderSizePixel = 0,
        Parent = tab.content
    })
    
    toggle.label = CreateInstance("TextLabel", {
        Name = "Label",
        Size = UDim2.new(0.7, 0, 1, 0),
        Position = UDim2.new(0, 10, 0, 0),
        BackgroundTransparency = 1,
        Text = text,
        TextColor3 = COLORS.TEXT,
        TextSize = 14,
        Font = FONTS.PRIMARY,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = toggle.frame
    })
    
    toggle.button = CreateInstance("Frame", {
        Name = "ToggleButton",
        Size = UDim2.new(0.2, 0, 0.6, 0),
        Position = UDim2.new(0.75, 0, 0.2, 0),
        BackgroundColor3 = default and COLORS.ACCENT or COLORS.TEXT_SECONDARY,
        BorderSizePixel = 0,
        Parent = toggle.frame
    })
    
    -- Add toggle functionality
    toggle.frame.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            toggle.value = not toggle.value
            Tween(toggle.button, {
                BackgroundColor3 = toggle.value and COLORS.ACCENT or COLORS.TEXT_SECONDARY
            }, 0.2)
            if callback then
                callback(toggle.value)
            end
        end
    end)
    
    table.insert(tab.elements, toggle.frame)
    return toggle
end

-- Slider Element
function VexHubUI:AddSlider(tab, text, min, max, default, callback)
    local slider = {
        value = default or min,
        frame = nil,
        label = nil,
        bar = nil,
        button = nil
    }
    
    slider.frame = CreateInstance("Frame", {
        Name = "Slider",
        Size = UDim2.new(0.9, 0, 0, 50),
        Position = UDim2.new(0.05, 0, 0, #tab.elements * 55 + 10),
        BackgroundColor3 = COLORS.SECONDARY,
        BorderSizePixel = 0,
        Parent = tab.content
    })
    
    slider.label = CreateInstance("TextLabel", {
        Name = "Label",
        Size = UDim2.new(1, 0, 0, 20),
        Position = UDim2.new(0, 0, 0, 0),
        BackgroundTransparency = 1,
        Text = text .. ": " .. default,
        TextColor3 = COLORS.TEXT,
        TextSize = 14,
        Font = FONTS.PRIMARY,
        Parent = slider.frame
    })
    
    slider.bar = CreateInstance("Frame", {
        Name = "Bar",
        Size = UDim2.new(1, -20, 0, 4),
        Position = UDim2.new(0, 10, 0, 30),
        BackgroundColor3 = COLORS.TEXT_SECONDARY,
        BorderSizePixel = 0,
        Parent = slider.frame
    })
    
    slider.button = CreateInstance("Frame", {
        Name = "Button",
        Size = UDim2.new(0, 16, 0, 16),
        Position = UDim2.new(0, 10, 0, 30),
        BackgroundColor3 = COLORS.ACCENT,
        BorderSizePixel = 0,
        Parent = slider.frame
    })
    
    -- Add slider functionality
    local function updateSlider(input)
        local percent = math.clamp((input.Position.X - slider.bar.AbsolutePosition.X) / slider.bar.AbsoluteSize.X, 0, 1)
        local value = min + (max - min) * percent
        slider.value = math.floor(value)
        slider.label.Text = text .. ": " .. slider.value
        slider.button.Position = UDim2.new(percent, -8, 0, 30)
        if callback then
            callback(slider.value)
        end
    end
    
    slider.button.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            local connection
            connection = input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    connection:Disconnect()
                end
            end)
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.Change then
                    updateSlider(input)
                end
            end)
        end
    end)
    
    table.insert(tab.elements, slider.frame)
    return slider
end

-- Dropdown Element
function VexHubUI:AddDropdown(tab, text, options, callback)
    local dropdown = {
        value = nil,
        frame = nil,
        button = nil,
        list = nil,
        options = options or {}
    }
    
    dropdown.frame = CreateInstance("Frame", {
        Name = "Dropdown",
        Size = UDim2.new(0.9, 0, 0, 30),
        Position = UDim2.new(0.05, 0, 0, #tab.elements * 35 + 10),
        BackgroundColor3 = COLORS.SECONDARY,
        BorderSizePixel = 0,
        Parent = tab.content
    })
    
    dropdown.button = CreateInstance("TextButton", {
        Name = "Button",
        Size = UDim2.new(1, 0, 1, 0),
        BackgroundColor3 = COLORS.SECONDARY,
        BorderSizePixel = 0,
        Text = text,
        TextColor3 = COLORS.TEXT,
        TextSize = 14,
        Font = FONTS.PRIMARY,
        Parent = dropdown.frame
    })
    
    dropdown.list = CreateInstance("Frame", {
        Name = "List",
        Size = UDim2.new(1, 0, 0, 0),
        Position = UDim2.new(0, 0, 0, 30),
        BackgroundColor3 = COLORS.SECONDARY,
        BorderSizePixel = 0,
        ClipsDescendants = true,
        Parent = dropdown.frame
    })
    
    -- Add options
    for i, option in ipairs(options) do
        local optionButton = CreateInstance("TextButton", {
            Name = "Option" .. i,
            Size = UDim2.new(1, 0, 0, 30),
            Position = UDim2.new(0, 0, 0, (i-1) * 30),
            BackgroundColor3 = COLORS.SECONDARY,
            BorderSizePixel = 0,
            Text = option,
            TextColor3 = COLORS.TEXT,
            TextSize = 14,
            Font = FONTS.PRIMARY,
            Parent = dropdown.list
        })
        
        optionButton.MouseButton1Click:Connect(function()
            dropdown.value = option
            dropdown.button.Text = text .. ": " .. option
            Tween(dropdown.list, {Size = UDim2.new(1, 0, 0, 0)}, 0.2)
            if callback then
                callback(option)
            end
        end)
        
        optionButton.MouseEnter:Connect(function()
            Tween(optionButton, {BackgroundColor3 = COLORS.ACCENT}, 0.2)
        end)
        
        optionButton.MouseLeave:Connect(function()
            Tween(optionButton, {BackgroundColor3 = COLORS.SECONDARY}, 0.2)
        end)
    end
    
    -- Toggle dropdown
    dropdown.button.MouseButton1Click:Connect(function()
        local targetSize = dropdown.list.Size.Y.Offset == 0 and #options * 30 or 0
        Tween(dropdown.list, {Size = UDim2.new(1, 0, 0, targetSize)}, 0.2)
    end)
    
    table.insert(tab.elements, dropdown.frame)
    return dropdown
end

-- Textbox Element
function VexHubUI:AddTextbox(tab, text, placeholder, callback)
    local textbox = {
        value = "",
        frame = nil,
        label = nil,
        input = nil
    }
    
    textbox.frame = CreateInstance("Frame", {
        Name = "Textbox",
        Size = UDim2.new(0.9, 0, 0, 50),
        Position = UDim2.new(0.05, 0, 0, #tab.elements * 55 + 10),
        BackgroundColor3 = COLORS.SECONDARY,
        BorderSizePixel = 0,
        Parent = tab.content
    })
    
    textbox.label = CreateInstance("TextLabel", {
        Name = "Label",
        Size = UDim2.new(1, 0, 0, 20),
        Position = UDim2.new(0, 0, 0, 0),
        BackgroundTransparency = 1,
        Text = text,
        TextColor3 = COLORS.TEXT,
        TextSize = 14,
        Font = FONTS.PRIMARY,
        Parent = textbox.frame
    })
    
    textbox.input = CreateInstance("TextBox", {
        Name = "Input",
        Size = UDim2.new(1, -20, 0, 30),
        Position = UDim2.new(0, 10, 0, 20),
        BackgroundColor3 = COLORS.PRIMARY,
        BorderSizePixel = 0,
        Text = "",
        PlaceholderText = placeholder,
        TextColor3 = COLORS.TEXT,
        PlaceholderColor3 = COLORS.TEXT_SECONDARY,
        TextSize = 14,
        Font = FONTS.PRIMARY,
        Parent = textbox.frame
    })
    
    textbox.input.FocusLost:Connect(function()
        textbox.value = textbox.input.Text
        if callback then
            callback(textbox.value)
        end
    end)
    
    table.insert(tab.elements, textbox.frame)
    return textbox
end

-- Keybind Element
function VexHubUI:AddKeybind(tab, text, default, callback)
    local keybind = {
        value = default or Enum.KeyCode.F,
        frame = nil,
        label = nil,
        button = nil
    }
    
    keybind.frame = CreateInstance("Frame", {
        Name = "Keybind",
        Size = UDim2.new(0.9, 0, 0, 30),
        Position = UDim2.new(0.05, 0, 0, #tab.elements * 35 + 10),
        BackgroundColor3 = COLORS.SECONDARY,
        BorderSizePixel = 0,
        Parent = tab.content
    })
    
    keybind.label = CreateInstance("TextLabel", {
        Name = "Label",
        Size = UDim2.new(0.7, 0, 1, 0),
        Position = UDim2.new(0, 10, 0, 0),
        BackgroundTransparency = 1,
        Text = text,
        TextColor3 = COLORS.TEXT,
        TextSize = 14,
        Font = FONTS.PRIMARY,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = keybind.frame
    })
    
    keybind.button = CreateInstance("TextButton", {
        Name = "Button",
        Size = UDim2.new(0.2, 0, 0.8, 0),
        Position = UDim2.new(0.75, 0, 0.1, 0),
        BackgroundColor3 = COLORS.PRIMARY,
        BorderSizePixel = 0,
        Text = default and default.Name or "...",
        TextColor3 = COLORS.TEXT,
        TextSize = 14,
        Font = FONTS.PRIMARY,
        Parent = keybind.frame
    })
    
    local listening = false
    
    keybind.button.MouseButton1Click:Connect(function()
        if not listening then
            listening = true
            keybind.button.Text = "..."
            keybind.button.BackgroundColor3 = COLORS.ACCENT
            
            local connection
            connection = UserInputService.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.Keyboard then
                    keybind.value = input.KeyCode
                    keybind.button.Text = input.KeyCode.Name
                    keybind.button.BackgroundColor3 = COLORS.PRIMARY
                    listening = false
                    connection:Disconnect()
                    if callback then
                        callback(input.KeyCode)
                    end
                end
            end)
        end
    end)
    
    table.insert(tab.elements, keybind.frame)
    return keybind
end

-- Color Picker Element
function VexHubUI:AddColorPicker(tab, text, default, callback)
    local colorPicker = {
        value = default or Color3.new(1, 1, 1),
        frame = nil,
        label = nil,
        preview = nil,
        picker = nil
    }
    
    colorPicker.frame = CreateInstance("Frame", {
        Name = "ColorPicker",
        Size = UDim2.new(0.9, 0, 0, 30),
        Position = UDim2.new(0.05, 0, 0, #tab.elements * 35 + 10),
        BackgroundColor3 = COLORS.SECONDARY,
        BorderSizePixel = 0,
        Parent = tab.content
    })
    
    colorPicker.label = CreateInstance("TextLabel", {
        Name = "Label",
        Size = UDim2.new(0.7, 0, 1, 0),
        Position = UDim2.new(0, 10, 0, 0),
        BackgroundTransparency = 1,
        Text = text,
        TextColor3 = COLORS.TEXT,
        TextSize = 14,
        Font = FONTS.PRIMARY,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = colorPicker.frame
    })
    
    colorPicker.preview = CreateInstance("Frame", {
        Name = "Preview",
        Size = UDim2.new(0.2, 0, 0.8, 0),
        Position = UDim2.new(0.75, 0, 0.1, 0),
        BackgroundColor3 = colorPicker.value,
        BorderSizePixel = 0,
        Parent = colorPicker.frame
    })
    
    -- Create color picker popup
    colorPicker.picker = CreateInstance("Frame", {
        Name = "Picker",
        Size = UDim2.new(0, 200, 0, 200),
        Position = UDim2.new(0.5, -100, 0.5, -100),
        BackgroundColor3 = COLORS.SECONDARY,
        BorderSizePixel = 0,
        Visible = false,
        Parent = self.window
    })
    
    -- Add color picker functionality
    colorPicker.preview.MouseButton1Click:Connect(function()
        colorPicker.picker.Visible = not colorPicker.picker.Visible
    end)
    
    table.insert(tab.elements, colorPicker.frame)
    return colorPicker
end

-- Label Element
function VexHubUI:AddLabel(tab, text)
    local label = CreateInstance("TextLabel", {
        Name = "Label",
        Size = UDim2.new(0.9, 0, 0, 20),
        Position = UDim2.new(0.05, 0, 0, #tab.elements * 25 + 10),
        BackgroundTransparency = 1,
        Text = text,
        TextColor3 = COLORS.TEXT,
        TextSize = 14,
        Font = FONTS.PRIMARY,
        Parent = tab.content
    })
    
    table.insert(tab.elements, label)
    return label
end

-- Separator Element
function VexHubUI:AddSeparator(tab)
    local separator = CreateInstance("Frame", {
        Name = "Separator",
        Size = UDim2.new(0.9, 0, 0, 1),
        Position = UDim2.new(0.05, 0, 0, #tab.elements * 25 + 10),
        BackgroundColor3 = COLORS.TEXT_SECONDARY,
        BorderSizePixel = 0,
        Parent = tab.content
    })
    
    table.insert(tab.elements, separator)
    return separator
end

return VexHubUI 
